#!/bin/bash
set -e  # Exit on any error

#
# This script runs visual regression tests using Playwright's built-in testing tools
#

# Debug: Print environment variables
echo "=== Environment Variables in Run Script ==="
set | grep -E 'DEV_SITE_URL|MULTIDEV_SITE_URL|TERMINUS_'
echo "==========================================="

# Variables
BUILD_DIR=$(pwd)
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
ARTIFACTS_DIR="${ARTIFACTS_FULL_DIR:-/tmp/artifacts}"

# Verify required environment variables
if [ -z "${MULTIDEV_SITE_URL}" ] || [ -z "${DEV_SITE_URL}" ]; then
    echo "ERROR: Required environment variables are not set"
    echo "MULTIDEV_SITE_URL: ${MULTIDEV_SITE_URL:-Not Set}"
    echo "DEV_SITE_URL: ${DEV_SITE_URL:-Not Set}"
    exit 1
fi

echo "Using multidev URL: $MULTIDEV_SITE_URL"
echo "Using dev URL: $DEV_SITE_URL"

# Ping both environments to wake them up
echo -e "\nPinging environments to wake them up..."
curl -I "$MULTIDEV_SITE_URL" > /dev/null || echo "Warning: Failed to ping $MULTIDEV_SITE_URL"
curl -I "$DEV_SITE_URL" > /dev/null || echo "Warning: Failed to ping $DEV_SITE_URL"


# Run the tests
echo -e "\nRunning visual regression tests with Playwright..."

# Check if baseline images exist in the snapshots directory
SNAPSHOT_DIR="./playwright-tests.spec.js-snapshots"

# STAGE 1: Generate reference images from reference environment (DEV)
echo "========================================================="
echo "Step 1: Generating baseline images from reference environment..."
echo "========================================================="

# Clear any existing reference images to ensure clean state
rm -rf playwright-tests.spec.js-snapshots

# Create baseline images from the reference environment
echo "Running test with UPDATE_SNAPSHOTS flag to create baseline images..."
set +e
TESTING_URL=$DEV_SITE_URL npx playwright test --update-snapshots
set -e

echo ""
echo "========================================================="
echo "Step 2: Running comparison tests against test environment..."
echo "========================================================="

# Now run comparison tests against the test environment
echo "Running tests without UPDATE_MODE to perform comparisons..."

# Run comparison tests (compare test environment screenshots with baseline)
TESTING_URL=$MULTIDEV_SITE_URL npx playwright test

# Store the exit code for retry logic later
TEST_EXIT_CODE=$?

# Check if there were any failures
if [ $TEST_EXIT_CODE -ne 0 ]; then
  echo ""
  echo "=========================================================="
  echo "Tests failed. Running the visual comparison tests again with higher thresholds..."
  echo "=========================================================="
  
  echo "Test report contents:"
  ls -la test-results/
  
  # Look for diff files to identify which tests failed
  echo ""
  echo "Failed tests (with visual differences):"
  find test-results -name "*-diff.png" | sed 's/.*\([A-Za-z]\+-[a-z]\+\)-diff\.png.*/\1/' | sort | uniq
  
  echo ""
  echo "=========================================================="
  echo "Retrying failed tests with higher thresholds..."
  echo "=========================================================="
  
  # Take a simpler approach - just retry ALL tests with higher thresholds
  # This ensures we won't miss any failures due to pattern matching issues
  TESTING_URL=$MULTIDEV_SITE_URL RETRY_WITH_HIGHER_THRESHOLD=true npx playwright test
  
  # Store the exit code of the retry
  RETRY_EXIT_CODE=$?
  
  # Print a summary message based on the retry results
  if [ $RETRY_EXIT_CODE -eq 0 ]; then
    echo ""
    echo "=========================================================="
    echo "SUCCESS: All retried tests passed with higher thresholds!"
    echo "=========================================================="
  else
    echo ""
    echo "=========================================================="
    echo "WARNING: Some tests still failed even with higher thresholds."
    echo "         This indicates significant visual differences."
    echo "=========================================================="
  fi
fi

# Copy the report to artifacts directory
echo "Copying test report to artifacts directory..."
mkdir -p "$ARTIFACTS_DIR/playwright-report"
cp -r playwright-report/* "$ARTIFACTS_DIR/playwright-report/" || echo "Warning: Failed to copy report"

