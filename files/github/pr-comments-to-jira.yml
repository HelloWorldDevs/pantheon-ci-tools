name: PR Comments to Jira

on:
  pull_request:
    types: [opened, synchronize, reopened, edited]

jobs:
  process_pr_to_jira:
    runs-on: ubuntu-latest
    steps:
      - name: Get PR details
        id: pr_details
        uses: actions/github-script@v6
        with:
          script: |
            // Get PR details including title and branch name
            const { owner, repo, number } = context.issue;
            const pr = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: number
            });
            
            // Extract potential Jira key sources
            const title = pr.data.title;
            const body = pr.data.body || "";
            const branch = pr.data.head.ref;
            
            // Try to find Jira issue key from PR title, body, or branch
            let issueKey = null;
            const jiraKeyRegex = /[A-Z]+-[0-9]+/;
            
            // Check title
            const titleMatch = title.match(jiraKeyRegex);
            if (titleMatch) {
              issueKey = titleMatch[0];
            }
            
            // Check body if no key in title
            if (!issueKey && body) {
              const bodyMatch = body.match(jiraKeyRegex);
              if (bodyMatch) {
                issueKey = bodyMatch[0];
              }
            }
            
            // Check branch if still no key
            if (!issueKey) {
              const branchMatch = branch.match(jiraKeyRegex);
              if (branchMatch) {
                issueKey = branchMatch[0];
              }
            }
            
            // Output PR and comment details
            core.setOutput('issue_key', issueKey || '');
            core.setOutput('pr_title', title);
            core.setOutput('pr_url', pr.data.html_url);
      
      - name: Post comment to Jira
        if: steps.pr_details.outputs.issue_key != ''
        uses: actions/github-script@v6
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER: ${{ secrets.JIRA_USER }}
          JIRA_TOKEN: ${{ secrets.JIRA_TOKEN }}
          ISSUE_KEY: ${{ steps.pr_details.outputs.issue_key }}
          PR_TITLE: ${{ steps.pr_details.outputs.pr_title }}
          PR_URL: ${{ steps.pr_details.outputs.pr_url }}
          COMMENT_AUTHOR: ${{ github.event.comment.user.login }}
          COMMENT_BODY: ${{ github.event.comment.body }}
        with:
          script: |
            const { JIRA_BASE_URL, JIRA_USER, JIRA_TOKEN, ISSUE_KEY, PR_TITLE, PR_URL, COMMENT_AUTHOR, COMMENT_BODY } = process.env;
            
            // Validate required parameters
            if (!JIRA_BASE_URL || !JIRA_USER || !JIRA_TOKEN || !ISSUE_KEY) {
              console.log('Missing required Jira credentials or issue key');
              process.exit(1);
            }
            
            const auth = Buffer.from(`${JIRA_USER}:${JIRA_TOKEN}`).toString('base64');
            const url = `${JIRA_BASE_URL}/rest/api/3/issue/${ISSUE_KEY}/comment`;
            
            // Create proper Atlassian Document Format (ADF) payload with PR comment
            const commentPayload = {
              body: {
                type: "doc",
                version: 1,
                content: [
                  {
                    type: "paragraph",
                    content: [
                      { type: "text", text: `GitHub Comment by @${COMMENT_AUTHOR} on PR: `, marks: [{ type: "strong" }] },
                      { type: "text", text: PR_TITLE },
                      { 
                        type: "text", 
                        text: " (View PR)", 
                        marks: [{ type: "link", attrs: { href: PR_URL } }] 
                      }
                    ]
                  },
                  {
                    type: "paragraph",
                    content: [{ type: "text", text: COMMENT_BODY }]
                  }
                ]
              }
            };
            
            console.log(`Posting comment by ${COMMENT_AUTHOR} to Jira issue ${ISSUE_KEY}`); 
            
            // Debug the exact payload we're sending
            console.log('Message payload:', JSON.stringify(commentPayload, null, 2));
            
            try {
              const response = await fetch(url, {
                method: 'POST',
                headers: {
                  'Authorization': `Basic ${auth}`,
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify(commentPayload)
              });
              
              if (response.ok) {
                console.log('✅ PR comment successfully posted to Jira');
              } else {
                console.log(`❌ Failed to post comment. Status: ${response.status}`);
                console.log(await response.text());
              }
            } catch (error) {
              console.log('Error posting to Jira:', error.message);
            }
