name: PR Comments to Jira

on:
  pull_request:
    types: [opened, synchronize, reopened, edited]

jobs:
  process_pr_to_jira:
    runs-on: ubuntu-latest
    steps:
      - name: Extract Jira issue key from PR title
        id: extract_from_title
        run: echo "ISSUE_KEY=$(echo "${{ github.event.pull_request.title }}" | grep -o '[A-Z]\+-[0-9]\+' || echo "")" >> $GITHUB_OUTPUT

      - name: Extract Jira issue key from PR body
        id: extract_from_body
        if: steps.extract_from_title.outputs.ISSUE_KEY == ''
        run: echo "ISSUE_KEY=$(echo "${{ github.event.pull_request.body }}" | grep -o '[A-Z]\+-[0-9]\+' | head -1 || echo "")" >> $GITHUB_OUTPUT

      - name: Extract Jira issue key from branch name
        id: extract_from_branch
        if: steps.extract_from_title.outputs.ISSUE_KEY == '' && steps.extract_from_body.outputs.ISSUE_KEY == ''
        run: echo "ISSUE_KEY=$(echo "${{ github.head_ref || github.ref_name }}" | grep -o '[A-Z]\+-[0-9]\+' | head -1 || echo "")" >> $GITHUB_OUTPUT

      - name: Set final issue key
        id: set_issue_key
        run: echo "ISSUE_KEY=${{ steps.extract_from_title.outputs.ISSUE_KEY || steps.extract_from_body.outputs.ISSUE_KEY || steps.extract_from_branch.outputs.ISSUE_KEY }}" >> $GITHUB_OUTPUT

      - name: Post to Jira
        if: steps.set_issue_key.outputs.ISSUE_KEY != ''
        uses: actions/github-script@v6
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER: ${{ secrets.JIRA_USER }}
          JIRA_TOKEN: ${{ secrets.JIRA_TOKEN }}
          ISSUE_KEY: ${{ steps.set_issue_key.outputs.ISSUE_KEY }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_URL: ${{ github.event.pull_request.html_url }}
        with:
          script: |
            const { JIRA_BASE_URL, JIRA_USER, JIRA_TOKEN, ISSUE_KEY, PR_TITLE, PR_URL } = process.env;
            
            // Validate required parameters
            if (!JIRA_BASE_URL || !JIRA_USER || !JIRA_TOKEN || !ISSUE_KEY) {
              console.log('Missing required Jira credentials or issue key');
              process.exit(1);
            }
            
            const auth = Buffer.from(`${JIRA_USER}:${JIRA_TOKEN}`).toString('base64');
            // Create proper Atlassian Document Format (ADF) payload
            const commentPayload = {
              body: {
                type: "doc",
                version: 1,
                content: [
                  {
                    type: "paragraph",
                    content: [
                      { type: "text", text: "PR: " },
                      { type: "text", text: PR_TITLE, marks: [{ type: "strong" }] },
                      { type: "text", text: " - " },
                      { 
                        type: "text", 
                        text: "View on GitHub", 
                        marks: [{ type: "link", attrs: { href: PR_URL } }] 
                      }
                    ]
                  }
                ]
              }
            };
            const url = `${JIRA_BASE_URL}/rest/api/3/issue/${ISSUE_KEY}/comment`;
            
            console.log(`Posting comment to Jira issue ${ISSUE_KEY}`);
            
            try {
              const response = await fetch(url, {
                method: 'POST',
                headers: {
                  'Authorization': `Basic ${auth}`,
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify(commentPayload)
              });
              
              if (response.ok) {
                console.log('✅ Comment successfully posted to Jira');
              } else {
                console.log(`❌ Failed to post comment. Status: ${response.status}`);
                console.log(await response.text());
              }
            } catch (error) {
              console.log('Error posting to Jira:', error.message);
            }
