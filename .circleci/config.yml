version: 2.1

orbs:
  jira: circleci/jira@2.2.0
  gh: circleci/github-cli@2.7.0
  slack: circleci/slack@5.1.1

executors:
  pantheon:
    docker:
      - image: quay.io/pantheon-public/build-tools-ci:8.x-php8.1
    working_directory: ~/project

defaults: &defaults
  executor: pantheon
  working_directory: ~/project
  environment:
    TZ: "/usr/share/zoneinfo/America/Los_Angeles"
    NOTIFY: 'scripts/github/add-commit-comment {project} {sha} "Created multidev environment [{site}#{env}]({site-url}). Login with creds: username: admin, password: wh0C4r3s?" {site-url}'
    ADMIN_USERNAME: admin

jobs:

  # Main build and deploy job
  build_and_deploy:
    <<: *defaults
    resource_class: small
    steps:
      # [setup] Checkout code and set up Docker
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      # [vars][wet] Calculate environment URLs and variables
      - run:
          name: Setup environment and calculate URLs
          command: |
            # Run Pantheon environment setup
            /build-tools-ci/scripts/set-environment

            # Source the script to preserve environment variables
            source ./.ci/scripts/setup_vars.sh

            # Verify the variables were set correctly
            echo "Verification: Using TERMINUS_ENV: $TERMINUS_ENV"
            echo "Verification: Using MULTIDEV_SITE_URL: $MULTIDEV_SITE_URL"
            echo "Verification: Using DEV_SITE_URL: $DEV_SITE_URL"

            # Create the workspace directory if it doesn't exist
            mkdir -p /tmp/workspace

            # Write all variables to a single file for workspace and subsequent steps
            {
              # CircleCI variables
              echo "export CI_BUILD_URL='${CIRCLE_BUILD_URL}'"
              echo "export CI_NODE_INDEX='${CIRCLE_NODE_INDEX}'"
              echo "export CI_REPOSITORY_URL='${CIRCLE_REPOSITORY_URL}'"
              echo "export ARTIFACTS_DIR_URL='${CIRCLE_BUILD_URL}/artifacts/${CIRCLE_NODE_INDEX}/artifacts'"

              # Pantheon and site variables
              echo "export TERMINUS_SITE='$TERMINUS_SITE'"
              echo "export TERMINUS_ENV='$TERMINUS_ENV'"
              echo "export JIRA_TICKET_ID='$JIRA_TICKET_ID'"
              echo "export MULTIDEV_SITE_URL='$MULTIDEV_SITE_URL'"
              echo "export DEV_SITE_URL='$DEV_SITE_URL'"
            } > /tmp/workspace/env_vars.sh

            # Also add to BASH_ENV for current job steps
            cat /tmp/workspace/env_vars.sh >> $BASH_ENV
            source $BASH_ENV

            echo "Saved environment variables to workspace:"
            cat /tmp/workspace/env_vars.sh
      # [build] Handle Composer dependencies
      - run:
          name: Clear Composer Cache
          command: composer clear-cache
      - run:
          name: Installing composer dependencies
          command: composer install --no-ansi --no-interaction --optimize-autoloader --no-progress
      # [cache] Save Composer cache
      - save_cache:
          key: composer-cache-v1-{{ checksum "composer.lock" }}
          paths:
            - $HOME/.composer/cache
      # [setup][deploy] SSH setup for deployment
      - add_ssh_keys:
          fingerprints:
            - "eRc4KsNbmwxFFwq7a26Fg4XnCyv8KI46TLhOoPgcB/A"
      - run:
          name: Preparing code for Pantheon
          command: |
            # Cutting root .gitignore so composer dependencies can be committed
            sed -i '1,/^# :::::::::::::::::::::: cut ::::::::::::::::::::::$/d' .gitignore
            # Committing any changes made during the build, including .gitignore adjustments
            git add -A
            git commit -m "Preparing code for deployment" || true
      - run:
          name: Deploying to Pantheon
          command: ./.ci/dev-multidev
          no_output_timeout: 40m
      - run:
          name: Post Multidev URL to GitHub PR
          command: ./.ci/scripts/post_multidev_url.sh

      # Save environment variables and Git data for the test job
      - run:
          name: Prepare workspace
          command: |
            mkdir -p /tmp/workspace

            # Copy the entire working directory to the workspace
            # This includes the .git directory which is needed for Jira integration
            echo "Copying files to workspace..."
            cp -a . /tmp/workspace/

            # Make sure the .git directory exists
            if [ -d "/tmp/workspace/.git" ]; then
              echo "Git repository found in workspace"
              # Ensure Git is properly configured in the workspace
              cd /tmp/workspace
              git config --global --add safe.directory /tmp/workspace
              git config --global user.email "circleci@example.com"
              git config --global user.name "CircleCI"
            else
              echo "Warning: .git directory not found in workspace"
            fi

            # Save environment variables
            {
              echo "export TERMINUS_SITE='${TERMINUS_SITE}'"
              echo "export TERMINUS_ENV='${TERMINUS_ENV}'"
              echo "export MULTIDEV_SITE_URL='${MULTIDEV_SITE_URL}'"
              echo "export DEV_SITE_URL='${DEV_SITE_URL}'"
            } > /tmp/workspace/env_vars.sh

            # Debug: Show what we're saving
            echo "=== Workspace Contents ==="
            ls -la /tmp/workspace
            echo "\n=== Saved Environment Variables ==="
            cat /tmp/workspace/env_vars.sh
            echo "=================================="

      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - .  # This includes all files, including .git

  test_and_notify:
    executor: backstopjs
    resource_class: medium
    working_directory: /tmp/workspace
    environment:
      BACKSTOPJS_VERSION: 6.3.25
      ARTIFACTS_DIR: ${CIRCLE_BUILD_URL}/artifacts/${CIRCLE_NODE_INDEX}/artifacts
    steps:
      # [persist][vars] Attach workspace to load saved environment variables and code
      - attach_workspace:
          at: /tmp/workspace
      # [setup] Set up Docker for running visual tests
      - setup_remote_docker:
          docker_layer_caching: true
      # [setup][notify] Install jq for Jira notifications
      - run:
          name: Install jq
          command: apt-get update && apt-get install -y jq

      # [vars] Load environment variables from the workspace
      - run:
          name: Load environment variables
          command: |
            # Source the environment variables file
            if [ -f /tmp/workspace/env_vars.sh ]; then
              echo "Loading environment variables from workspace..."
              source /tmp/workspace/env_vars.sh
              # Add to BASH_ENV for subsequent steps
              cat /tmp/workspace/env_vars.sh >> $BASH_ENV
              source $BASH_ENV

              # Debug: Show key environment variables
              echo "âœ… Environment variables loaded successfully"
              echo "MULTIDEV_SITE_URL: ${MULTIDEV_SITE_URL}"
              echo "DEV_SITE_URL: ${DEV_SITE_URL}"
            else
              echo "ERROR: Missing environment variable file!"
              exit 1
            fi

      # [test][setup] Set up visual regression test environment
      - run:
          name: Set up visual regression tests
          command: |
            # Navigate to test directory
            cd ${CIRCLE_WORKING_DIRECTORY}/.ci/test/visual-regression

            # Make script executable
            chmod +x run

            # Create artifacts directory
            mkdir -p "/tmp/artifacts"

            # Export artifacts directory variables
            export ARTIFACTS_DIR="/tmp/artifacts"
            export ARTIFACTS_FULL_DIR="${ARTIFACTS_DIR}"

            # Show test environment
            echo "\n=== Visual Regression Test Ready ==="
            echo "Test URL: ${MULTIDEV_SITE_URL}"
            echo "Reference URL: ${DEV_SITE_URL}"
            echo "Artifacts directory: ${ARTIFACTS_DIR}"


      # [test][core] Run visual regression tests
      - run:
          name: Run visual regression tests
          command: |
            # Run the visual regression tests
            echo "\n=== Running visual regression tests ==="
            echo "Testing URLs:"
            echo "- Test URL: ${MULTIDEV_SITE_URL}"
            echo "- Reference URL: ${DEV_SITE_URL}"


            circleci tests glob "./.ci/test/visual-regression/run" | circleci tests run --command="./.ci/test/visual-regression/run"

      # [artifacts][test] Store test artifacts for viewing in CircleCI UI
      - store_artifacts:
          path: /tmp/artifacts/backstop_data
          destination: backstop_data
      # [test][report] Store test results for CircleCI's test summary
      - store_test_results:
          path: /tmp/artifacts/backstop_data/ci_report/xunit.xml

      # [notify][jira] Send notification to Jira
      - jira/notify:
          environment: testing
          job_type: deployment
          pipeline_id: << pipeline.id >>
          pipeline_number: << pipeline.number >>
          debug: true

      # Simple Slack notification approach that avoids complex JSON handling
      - slack/notify:
          event: fail
          channel: ${SLACK_DEFAULT_CHANNEL}
          template: basic_fail_1

# [workflow] Main build, test, and notification workflow
workflows:
  build_test_notify:
    jobs:
      # [job] Primary build and deployment job
      - build_and_deploy
      # [job] Test and notification job with dependency on build job
      - test_and_notify:
          requires:
            - build_and_deploy
          # [context] Shared secrets and environment variables
          context:
            - SLACK_ACCESS_TOKEN
            - JIRA_WEBHOOK_URL
